name = "Storage Chest Layer"

requirements = {
	slots = {
		[1] = {
			name = "Storage Blocks",
			minCount = 64,
			maxCount = 64,
			exactCount = false,
			readyFunction = nil,
		},
		[2] = {
			name = "Storage Blocks",
			minCount = 8,
			maxCount = 8,
			exactCount = false,
			readyFunction = nil,
		},
	},
	fuel = function()
		local origin, layer = requirements.locations.start, requirements.locations.setup
		local offset = origin.y - layer.y
		if origin and layer and origin.y > 0 and layer.y > 0 then
			return 104 + offset * 2
		else
			return math.huge
		end
	end,
	locations = {
		name = "Layer Height",
		[1] = {
			name = "First Layer",
			location = function()
				local loc = requirements.locations.start
				if not location then error("No location API") end
				return location.new(loc.x, loc.y - 6, loc.z, 1)
			end,
		},
	}
}

instructions = function()
	local origin, layer = requirements.locations.start, requirements.locations.setup
	local offset = origin.y - layer.y

	do
		--get down to layer start location and move to first corner
		turtle.forward()
		for i = 1, offset do
			turtle.down()
		end
		turtle.turnRight()
		turtle.turnRight()
		for i = 1, 5 do
			turtle.forward()
		end
		turtle. turnLeft()
		for i = 1, 3 do
			turtle.forward()
		end
	end
	do
		--place chests
		local chestCount = 0
		local function placeChest()
			turtle.select(math.floor(chestCount / 64) + 1)
			if turtle.place() then
				chestCount = chestCount + 1
			end
		end

		local function placeChestDown()
			turtle.select(math.floor(chestCount / 64) + 1)
			if turtle.placeDown() then
				chestCount = chestCount + 1
			end
		end

		for i = 1, 3 do
			for i = 1, 5 do
				placeChest()
				placeChestDown()
				turtle.back()
				turtle.back()
			end
			placeChest()
			placeChestDown()
			turtle.turnRight()
			turtle.back()
			turtle.back()
			turtle.turnRight()
			for i = 1, 5 do
				placeChestDown()
				turtle.back()
				turtle.back()
				placeChest()
			end
			placeChestDown()
			turtle.back()
			turtle.turnLeft()
			turtle.back()
			placeChest()
			if i < 3 then
				turtle.back()
				turtle.turnLeft()
				turtle.back()
			end
		end
	end
	do
		--exit and move back to starting position
		turtle.down()
		turtle.turnRight()
		for i = 1, 6 do
			turtle.forward()
		end
		turtle.turnLeft()
		for i = 1, 6 do
			turtle.forward()
		end
		for i = 1, offset + 1 do
			turtle.up()
		end
		turtle.forward()
		for i = 1, 2 do
			turtle.forward()
			turtle.turnLeft()
			turtle.forward()
		end
	end
end