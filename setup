local projectOffset = 1
local project, loc, buildLoc
local display, handler
local headingNames = {"West", "North", "East", "South"}

local projects = {}

if fs.exists("/projects") and fs.isDir("/projects") then
	for _, name in pairs(fs.list("/projects")) do
		local file = fs.combine("/projects", name)
		local usefulEnv = {shell = shell}
		setmetatable(usefulEnv, {__index = _G})
		local env = {}
		setmetatable(env, {__index = usefulEnv})
		local fn, err = loadfile(file)
		if fn then
			setfenv(fn, env)
			fn()
			--copy into project table
			projects[name] = {}
			for k, v in pairs(env) do
				projects[name][k] = v
			end
		end
	end
else
	print("Could not find project folder!")
	return
end

local sortedProjects = {}
for name in pairs(projects) do
	table.insert(sortedProjects, name)
end
table.sort(sortedProjects)

local function printCenter(text)
	text = tostring(text)
	local x, y = term.getSize()
	local xCur, yCur = term.getCursorPos()
	term.setCursorPos((x - #text) / 2 + 1, yCur)
	term.write(text)
end

local function isSlotReady(slot)
	if project and project.requirements.slots then
		local slotReq = project.requirements.slots[slot]
		if slotReq.readyFunction then
			return slotReq.readyFunction()
		elseif slotReq.exactCount then
			return slotReq.minCount == slotReq.maxCount and slotReq.minCount == turtle.getItemCount(slot)
		else
			return turtle.getItemCount(slot) >= slotReq.minCount
		end
	else
		return false
	end
end

local function areAllSlotsReady()
	if project and project.requirements.slots then
		for i = 1, #project.requirements.slots do
			if not isSlotReady(i) then return false end
		end
		return true
	else
		return false
	end
end

local function areLocationsReady()
	if project and projects.requirements.locations then
		local startLoc, endLoc
		if loc and loc.x and loc.y and loc.z and loc.y > 0 and buildLoc and buildLoc.x and buildLoc.y and buildLoc.z and buildLoc.y > 0 then
			return true
		else
			return false
		end
	else
		return true
	end
end

local function isFuelSufficient()
	if project and project.requirements.fuel then
		local fuelCost = project.requirements.fuel
		if type(project.requirements.fuel) == "function" then
			fuelCost = project.requirements.fuel()
		end
		return turtle.getFuelLevel() >= fuelCost
	else
		return false
	end
end

local displayProjects, handleProjects, displayRequirements, handleRequirements, displaySlots, handleSlots, displayLocations, handleLocations, displayFueling, handleFueling

function displayProjects()
	local x, y = term.getSize()
	local function projectLine(index)
		if term.isColor() then
			term.setBackgroundColor(index % 2 == 0 and colors.white or colors.lightGray)
			term.setTextColor(colors.black)
		else
			term.setBackgroundColor(colors.black)
			term.setTextColor(colors.white)
		end
		term.clearLine()
		local x, y = term.getCursorPos()
		term.setCursorPos(2, y)
		term.write(projects[sortedProjects[index]].name)
	end
	term.setBackgroundColor(term.isColor() and colors.gray or colors.black)
	term.setTextColor(colors.white)
	term.clear()
	term.setCursorPos(1, 1)
	printCenter("Project List")
	for i = 1, math.min(#sortedProjects, y - 2) do
		term.setCursorPos(1, i + 2)
		projectLine(projectOffset + i - 1)
	end
end

function handleProjects(event)
	if event[1] == "mouse_click" then
		local x, y = term.getSize()
		if event[4] >= 3 and event[4] <= y then
			--clicked somewhere in the places list
			if event[3] == x then
				--clicked the scroll bar.
				if event[4] == 3 then
					--up
					if projectOffset > 1 then
						projectOffset = projectOffset - 1
					end
				elseif event[4] == y then
					if projectOffset + y - 3 < #places then
						projectOffset = projectOffset + 1
					end
				end
			else
				--clicked on a place!
				local index = projectOffset + event[4] - 3
				if index <= #places then
					project = projects[sortedProjects[index]]
					display = displayRequirements
					handler = handleRequirements
					--we have a project selected, use projects[sortedProjects[index]] to access.
				end			
			end
		end
	end
end

local function drawRequirementsHeader()
	local function setColors(bool)
		if term.isColor() then
			term.setBackgroundColor(bool and colors.green or colors.red)
			term.setTextColor(colors.white)
		else
			term.setBackgroundColor(bool and colors.black or colors.white)
			term.setTextColor(bool and colors.white or colors.black)
		end
	end
	local x, y = term.getSize()
	term.setCursorPos(1, 1)
	term.setBackgroundColor(term.isColor() and colors.gray or colors.black)
	term.setTextColor(colors.white)
	term.clear()
	printCenter(project.name.." - Requirements")
	do
		if project.requirements.slots then
			term.setCursorPos(4, 3)
			setColors(areAllSlotsReady())
			term.write(" SLOTS ")
		end
		if project.requirements.locations then
			term.setCursorPos(14, 3)
			setColors(areLocationsReady())
			term.write(" LOCATIONS ")
		end
		if project.requirements.fuel then
			term.setCursorPos(28, 3)
			setColors(isFuelSufficient())
			term.write(" FUELING ")
		end
	end
end

local function handleRequirementsHeader(event)
	if event[1] == "mouse_click" and event[2] == 1 then
		if event[4] == 3 then
			if event[3] >= 4 and event[3] <= 10 then
				--clicked Slots
				display = displaySlots
				handler = handleSlots
			elseif event[3] >= 14 and event[3] <= 24 then
				--clicked Locations
				display = displayLocations
				handler = handleLocations
			elseif event[3] >= 28 and event[3] <= 36 then
				--clicked Fueling
				display = displayFueling
				handler = handleFueling
			end
		end
	end
end

function displayRequirements()
	drawRequirementsHeader()
end

function handleRequirements(event)
	handleRequirementsHeader(event)
end

function displaySlots()
	drawRequirementsHeader()
	local function setColors(bool)
		if term.isColor() then
			term.setBackgroundColor(colors.gray)
			term.setTextColor(bool and colors.lime or colors.red)
		else
			term.setBackgroundColor(bool and colors.black or colors.white)
			term.setTextColor(bool and colors.white or colors.black)
		end
	end
	local x, y = term.getSize()
	term.setCursorPos(1, 1)
	term.setBackgroundColor(term.isColor() and colors.gray or colors.black)
	term.setTextColor(colors.white)
	term.clearLine()
	printCenter(project.name.." - Slots")
	do
		for i = 1, #project.requirements.slots do
			local slot = project.requirements.slots[i]
			if i > 8 then
				term.setCursorPos(math.ceil(x / 2), i - 4)
			else
				term.setCursorPos(2, i + 4)
			end
			term.setBackgroundColor(term.isColor() and colors.gray or colors.black)
			term.setTextColor(colors.white)
			term.write(i..": ")
			setColors(isSlotReady(i))
			if slot.minCount == slot.maxCount then
				term.write(tostring(slot.minCount).." "..slot.name)
			else
				term.write(tostring(slot.minCount).."-"..tostring(slot.maxCount).." "..slot.name)
			end
		end
	end
end

function handleSlots(event)
	if event[1] == "mouse_click" then
		if event[4] <= 4 then
			return handleRequirementsHeader(event)
		end
	end
end

function displayLocations()
	drawRequirementsHeader()
	local x, y = term.getSize()
	term.setCursorPos(1, 1)
	term.setBackgroundColor(term.isColor() and colors.gray or colors.black)
	term.setTextColor(colors.white)
	term.clearLine()
	printCenter(project.name.." - Locations")
	do
		term.setCursorPos(2, 5)
		term.write("Current Position")
		term.setCursorPos(2, 6)
		term.write("X: ")
		if loc and loc.x then
			term.write(tostring(loc.x))
		end
		term.setCursorPos(2, 7)
		term.write("Y: ")
		if loc and loc.y then
			term.write(tostring(loc.y))
		end
		term.setCursorPos(2, 8)
		term.write("Z: ")
		if loc and loc.z then
			term.write(tostring(loc.z))
		end
		term.setCursorPos(2, 9)
		term.write("Facing: ")
		if loc and loc.h and headingNames[loc.h] then
			term.write(headingNames[loc.h])
		end
	end
	do
		local column = math.ceil(x / 2)
		term.setCursorPos(column, 5)
		term.write("Build Position")
		term.setCursorPos(column, 6)
		term.write("X: ")
		if buildLoc and buildLoc.x then
			term.write(tostring(buildLoc.x))
		end
		term.setCursorPos(column, 7)
		term.write("Y: ")
		if buildLoc and buildLoc.y then
			term.write(tostring(buildLoc.y))
		end
		term.setCursorPos(column, 8)
		term.write("Z: ")
		if buildLoc and buildLoc.z then
			term.write(tostring(buildLoc.z))
		end
		term.setCursorPos(column, 9)
		term.write("Facing: ")
		if buildLoc and buildLoc.h and headingNames[buildLoc.h] then
			term.write(headingNames[buildLoc.h])
		end
		if project.requirements.locations.setup and #project.requirements.locations.setup > 1 then
			term.setCursorPos((x - column - 9) / 2 + column, 11)
			term.write("(Options)")
		end
	end
end

function displayFueling()
	drawRequirementsHeader()
	local function setColors(bool)
		if term.isColor() then
			term.setBackgroundColor(colors.gray)
			term.setTextColor(bool and colors.lime or colors.red)
		else
			term.setBackgroundColor(bool and colors.black or colors.white)
			term.setTextColor(bool and colors.white or colors.black)
		end
	end
	local x, y = term.getSize()
	term.setCursorPos(1, 1)
	term.setBackgroundColor(term.isColor() and colors.gray or colors.black)
	term.setTextColor(colors.white)
	term.clearLine()
	printCenter(project.name.." - Fueling")
	do
		local fuelCost = project.requirements.fuel
		if type(project.requirements.fuel) == "function" then
			fuelCost = project.requirements.fuel()
		end
		local fuel = turtle.getFuelLevel()
		term.setCursorPos(2, 5)
		term.write("Fuel ")
		if #project.requirements.slots < 16 then
			if term.isColor() then
				term.setTextColor(colors.lightGray)
				term.write("(Refuel)")
			else
				term.write("(")
				term.setBackgroundColor(colors.white)
				term.setTextColor(colors.black)
				term.write("R")
				term.setBackgroundColor(colors.black)
				term.setTextColor(colors.white)
				term.write("efuel)")
			end
		end
		term.setTextColor(colors.white)
		term.setCursorPos(2, 6)
		term.write("Available: ")
		setColors(fuel >= fuelCost)
		term.write(tostring(fuel))
		term.setBackgroundColor(term.isColor() and colors.gray or colors.black)
		term.setTextColor(colors.white)
		term.setCursorPos(2, 7)
		term.write("Required: "..fuelCost)
	end
end

function handleFueling(event)
	if event[1] == "mouse_click" then
		if event[4] <= 4 then
			return handleRequirementsHeader(event)
		elseif event[4] == 5 and event[3] >= 10 and event[3] <= 17 then
			--clicked Refuel
			for i = #project.requirements.slots + 1, 16 do
				turtle.select(i)
				turtle.refuel(64)
			end
		end
	end
end

project = projects.gpssatellite

do
	local gpsVec = vector.new(gps.locate(0.5))
	if gpsVec.y > 0 then
		--if gps is already available, use those coordinates.
		loc = location.new(gpsVec.x, gpsVec.y, gpsVec.z, 0)
		startLoc = location.new(gpsVec.x, gpsVec.y, gpsVec.z, 0)
		if turtle.forward() then
			local secLoc = vector.new(gps.locate())
			local head = secLoc - gpsVec
			loc.h = location.getOrientation(head.x, head.z)
			startLoc.h = loc.h
			if not turtle.back() then
				loc.x, loc.y, loc.z, startLoc.x, startLoc.y, startLoc.z = secLoc.x, secLoc.y, secLoc.z, secLoc.x, secLoc.y, secLoc.z
			end
		end
	end
end

displayLocations()
